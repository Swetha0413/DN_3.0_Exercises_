scenario 1:
CREATE OR REPLACE PROCEDURE SafeTransferFunds(
    p_from_account_id IN NUMBER,
    p_to_account_id IN NUMBER,
    p_amount IN NUMBER
) IS
    insufficient_funds EXCEPTION;
    account_not_found EXCEPTION;
    v_from_balance NUMBER;
    v_to_balance NUMBER;
BEGIN
    -- Get the balance of the from account
    SELECT balance INTO v_from_balance
    FROM accounts
    WHERE account_id = p_from_account_id;
    
    -- Check if the from account has sufficient funds
    IF v_from_balance < p_amount THEN
        RAISE insufficient_funds;
    END IF;
    
    -- Get the balance of the to account
    SELECT balance INTO v_to_balance
    FROM accounts
    WHERE account_id = p_to_account_id;
    
    -- Transfer the funds
    UPDATE accounts
    SET balance = balance - p_amount
    WHERE account_id = p_from_account_id;
    
    UPDATE accounts
    SET balance = balance + p_amount
    WHERE account_id = p_to_account_id;
    
    COMMIT;
EXCEPTION
    WHEN insufficient_funds THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: Insufficient funds in the from account.');
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: Account not found.');
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: An unexpected error occurred.');
END SafeTransferFunds;
/
scenario 2:
CREATE OR REPLACE PROCEDURE UpdateSalary(
    p_employee_id IN NUMBER,
    p_percentage IN NUMBER
) IS
    v_salary employees.salary%TYPE;
    employee_not_found EXCEPTION;
BEGIN
    -- Get the current salary of the employee
    SELECT salary INTO v_salary
    FROM employees
    WHERE employee_id = p_employee_id;
    
    -- Update the salary
    UPDATE employees
    SET salary = salary + (salary * p_percentage / 100)
    WHERE employee_id = p_employee_id;
    
    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: Employee ID ' || p_employee_id || ' not found.');
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: An unexpected error occurred.');
END UpdateSalary;
/
scenario 3:
CREATE OR REPLACE PROCEDURE AddNewCustomer(
    p_customer_id IN NUMBER,
    p_name IN VARCHAR2,
    p_age IN NUMBER,
    p_balance IN NUMBER
) IS
    customer_already_exists EXCEPTION;
BEGIN
    -- Check if a customer with the same ID already exists
    BEGIN
        SELECT 1 INTO v_dummy
        FROM customers
        WHERE customer_id = p_customer_id;
        
        -- If the customer exists, raise an exception
        RAISE customer_already_exists;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            NULL; -- Do nothing, customer does not exist
    END;
    
    -- Insert the new customer
    INSERT INTO customers (customer_id, name, age, balance)
    VALUES (p_customer_id, p_name, p_age, p_balance);
    
    COMMIT;
EXCEPTION
    WHEN customer_already_exists THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: Customer with ID ' || p_customer_id || ' already exists.');
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: An unexpected error occurred.');
END AddNewCustomer;
/
